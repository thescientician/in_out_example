In and Out Board skeleton:

Feel free to alter the config/database.yml to suit your development environment.


Features to Add:

* The statuses in the UI should update using AJAX requests in close to realtime without having to refresh the page or click the update link. 

* The app should be able to support teams (such as Customer Service Reps, Salespeople) of users so team can better track the people they work with. 
  A user can only belong to a single team.

* Ensure that the app has good test coverage using RSpec. Your tests should produce a reasonable test coverage report. 
  (Use 'COVERAGE=true bundle exec rspec' to generate the coverage report; the report is located at coverage/index.html)

* There is a migration (20130416230652_convert_string_ips_to_integers.rb that) that, if there existed data for those fields, would destroy it. 
  Alter this migration to ensure that, if the database was full of data before the migration, all data would still be intact afterwards.                                          

Additional Questions To Be Answered (related to the code in this project):

* Notice that the IP addresses are stored as integers in the DB.  
  What are the pros and cons of this approach, compared to storing the IP addresses as strings?

* Are there any security issues present within app/?
  No need to mention security vulnerabilities within external gems.  
  List any security issues you found, and how to fix them. 
  Also list any potential security issues that you investigated that you believe the site to be free of. 





Answers

Ip Addresses

  Pros
    - easy to differentiate numeric vs. string
    - size in database is smaller when using MySql and most others. 
    - using INET_ATON will store these values for you, and INET_ITOA will pull them back out of the DB much faster than the ruby code implemented in the original source. I had to look this up.

  Cons
    - Remaining database agnostic and having a large number of users could become problematic in larger sites. The update process would either have to be re-written (from the way I've done) to be done in the DB using generic SQL statements. Very possible, but a drag.
    - Obtuse to store. Looking at values in the DB or without the user model is basically useless when the numbers are close (for example: 2147483647 vs. 2147482647).
    - Will not work in/when/if IPv6 becomes the new standard, you'd have to change the db datatype.

    max size of ip address as integer -2147483648..2147483647
    
    sqlite3: -9223372036854775808..9223372036854775807
    mysql(signed): -2147483648..2147483647(what a coincidence)


Security
  1) XSS injection with the original code, which would have been avoided in a non-AJAX version of the application since Rails handles escaping rendered HTML by default. The input of something like <script>alert('XSS');</script> into one of the users name fields allows for the script to be executed after each AJAX response if you use the original code as supplied. Such a vulnerability could be used to steal user data, or perform other nefarious deeds.

  Such a vulnerability also opens up the possibility of introducing other tags using the same domain as the application. 

  Possible solutions, 

    i) Strip tags and escape html on their way into the server or from the server when being displayed. 

    ii) Render the html server-side shoot the result to the browser after escaping for Javascript, and display client side.

    iii) Don't use the straight .html() replacement on the client side without being really sure you know what you're showing. To replace the user name, use .text() instead.

  2) The website field is problematic, theoretically it could take the user to a website that could be phishing or have some kind of other nefarious intent. You could craft a similar look and feel site as the ClioInOutStub and start stealing user information. 

  3) Users are able to edit one another's status, name and website as long as they are logged in. e.g. being User id#1, logging in, typing in url /users/2/edit, and changing away. Add a check in the users_controller to disallow signed in users editing anyone but themselves. 

  Nitpicky Ones

  4) The Rails secret_key according best practices should not be stored in source control and if it is only as a fallback for a environment specific unique key (like production). It could be stored on the application server in a dot file(dotenv gem), environment variable, or symlinked when deploying. Of note is that in a recent Devise(3.x I believe) update they maintain their own set of keys for user credential hashing.

  5) In Production, SSL should im my opinion always be turned on. There's really no reason not to. Here it's turned off. Nitpicky I know, but this one is pretty important to me.

  Last Stage: Enter the Brakeman(gem)

  6) Sneaky to not include protect_from_forgery in the ApplicationController I must say. Thanks, Kyle d'Oliveira(bd8a928). Results in coverage/brakeman.html

  I did check the application for possible vulnerable .where statements in case of SQL Injection, there were none. Read the wiki for versions 3.2.13(application) - 3.2.16(current), then remebered that I wasn't suppose to list any in used dependencies... Checked the site for html_safe calls. All of this was before using the brakeman gem. 

I did read the Rails Security Guide again, been awhile and always good to keep it fresh.
